#include <iostream>

class			Base { public : virtual ~Base() {} };

class			A : public Base {};
class			B : public Base {};
class			C : public Base {};

Base			*generate(void)
{
	switch (rand() % 3)
	{
		case 0:
			return new A;
		case 1:
			return new B;
		case 2:
			return new C;
	}
	return NULL;
}

void			identify_from_pointer(Base *p)
{
	if (dynamic_cast<A*>(p))
		std::cout << "A" << std::endl;
	else if (dynamic_cast<B*>(p))
		std::cout << "B" << std::endl;
	else if (dynamic_cast<C*>(p))
		std::cout << "C" << std::endl;
}

void			identify_from_reference(Base &p)
{
	if (dynamic_cast<A*>(&p))
		std::cout << "A" << std::endl;
	else if (dynamic_cast<B*>(&p))
		std::cout << "B" << std::endl;
	else if (dynamic_cast<C*>(&p))
		std::cout << "C" << std::endl;
}

int				main()
{
	srand(time(NULL));

	Base	*p1 = new A;
	Base	*p2 = new B;
	Base	*p3 = new C;
	Base	*p = NULL;

	std::cout << "\t---> Calling indentify_from_pointer with A B C" << std::endl;
	identify_from_pointer(p1);
	identify_from_pointer(p2);
	identify_from_pointer(p3);

	std::cout << "\t---> Calling indentify_from_reference with A B C" << std::endl;
	identify_from_reference(*p1);
	identify_from_reference(*p2);
	identify_from_reference(*p3);

	std::cout << "\t---> Calling both function with random Base * generated by the generate function" << std::endl;
	for (int i = 0; i < 4; i++)
	{
		p = generate();
		identify_from_pointer(p);
		identify_from_reference(*p);
		std::cout << std::endl;
		delete p;
	}

	delete p1;
	delete p2;
	delete p3;

	return 0;
}